name: Release

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches: [master]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [master]
  workflow_dispatch:

jobs:
  build-legacy-artifacts:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            image: ubuntu:20.04
            runner: ubuntu-latest
            name: x86_64-unknown-linux-gnu
          - target: aarch64-unknown-linux-gnu
            image: ubuntu:20.04
            runner: ubuntu-24.04-arm
            name: aarch64-unknown-linux-gnu
    env:
      package_name: openmcp

    runs-on: ${{ matrix.runner }}
    name: ${{ matrix.name }}
    container:
      image: ${{ matrix.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Install rustup
        run: |
          apt update && apt install -y curl build-essential
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Setup rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Set archive name
        id: archive
        run: >
          echo "archive_name=${{ env.package_name }}-${{ matrix.name }}" >> "$GITHUB_ENV"

      - name: Create Archive Folder
        run: mkdir ${{ env.archive_name }}

      - name: Copy Unix Artifact
        run: |
          cp target/${{ matrix.target }}/release/${{ env.package_name }} ${{ env.archive_name }}
          tar zcvf ${{ env.archive_name }}.tgz ${{ env.archive_name }}
          ls -alh ${{ env.archive_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ env.archive_name }}.tgz
          if-no-files-found: error

  build-artifacts:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    env:
      package_name: openmcp

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup rust toolchain
        uses: ./.github/actions/setup-rust
        with:
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Set archive name (non-windows)
        if: "${{ matrix.os != 'windows-latest' }}"
        id: archive
        run: >
          echo "archive_name=${{ env.package_name }}-${{ matrix.target }}" >> "$GITHUB_ENV"

      - name: Set archive name (windows)
        if: "${{ matrix.os == 'windows-latest' }}"
        shell: pwsh
        run: >
          echo "archive_name=${{ env.package_name }}-${{ matrix.target }}"
           | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create Archive Folder
        run: mkdir ${{ env.archive_name }}

      - name: Copy Unix Artifact
        if: "${{ matrix.os != 'windows-latest' }}"
        run: |
          cp target/${{ matrix.target }}/release/${{ env.package_name }} ${{ env.archive_name }}
          tar zcvf ${{ env.archive_name }}.tgz ${{ env.archive_name }}
          ls -alh ${{ env.archive_name }}

      - name: Copy Windows Artifact
        if: "${{ matrix.os == 'windows-latest' }}"
        run: |
          cp target/${{ matrix.target }}/release/${{ env.package_name }}.exe ${{ env.archive_name }}
          tar zcvf ${{ env.archive_name }}.tgz ${{ env.archive_name }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: ${{ env.archive_name }}.tgz
          if-no-files-found: error

  release:
    needs: [build-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: check assets
        run: |
          ls -la artifacts
          tar zxvf artifacts/openmcp-x86_64-unknown-linux-gnu.tgz
          tar zxvf artifacts/openmcp-aarch64-unknown-linux-gnu.tgz
          tar zxvf artifacts/openmcp-x86_64-apple-darwin.tgz
          tar zxvf artifacts/openmcp-aarch64-apple-darwin.tgz
          tar zxvf artifacts/openmcp-x86_64-pc-windows-msvc.tgz

      - name: Create a new Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          gh release create ${{ github.ref_name }} \
            --title "${{ github.ref_name }}" \
            --draft \
            --prerelease
          gh release upload ${{ github.ref_name }} \
            artifacts/openmcp-x86_64-unknown-linux-gnu.tgz \
            artifacts/openmcp-aarch64-unknown-linux-gnu.tgz \
            artifacts/openmcp-x86_64-apple-darwin.tgz \
            artifacts/openmcp-aarch64-apple-darwin.tgz \
            artifacts/openmcp-x86_64-pc-windows-msvc.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crate:
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup rust toolchain
        uses: ./.github/actions/setup-rust
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
          dry-run: ${{ !startsWith(github.ref, 'refs/tags/v') }}
